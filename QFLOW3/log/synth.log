Qflow synthesis logfile created on Sun 24 Sep 00:25:58 BST 2023
Running yosys for verilog parsing and synthesis
yosys  -s BundleParser.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.23 (git sha1 7ce5011c24b)


-- Executing script file `BundleParser.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v
Parsing Verilog input from `/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v' to AST representation.
Generating RTLIL representation for module `\BundleParser'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \BundleParser

3.1.2. Analyzing design hierarchy..
Top module:  \BundleParser
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1 in module BundleParser.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
     1/28: $0\enable4_o[0:0]
     2/28: $0\enable3_o[0:0]
     3/28: $0\enable2_o[0:0]
     4/28: $0\enable1_o[0:0]
     5/28: $0\majID4_o[63:0]
     6/28: $0\majID3_o[63:0]
     7/28: $0\majID2_o[63:0]
     8/28: $0\majID1_o[63:0]
     9/28: $0\tid4_o[63:0]
    10/28: $0\tid3_o[63:0]
    11/28: $0\tid2_o[63:0]
    12/28: $0\tid1_o[63:0]
    13/28: $0\pid4_o[31:0]
    14/28: $0\pid3_o[31:0]
    15/28: $0\pid2_o[31:0]
    16/28: $0\pid1_o[31:0]
    17/28: $0\is64b4_o[0:0]
    18/28: $0\is64b3_o[0:0]
    19/28: $0\is64b2_o[0:0]
    20/28: $0\is64b1_o[0:0]
    21/28: $0\addr4_o[63:0]
    22/28: $0\addr3_o[63:0]
    23/28: $0\addr2_o[63:0]
    24/28: $0\addr1_o[63:0]
    25/28: $0\instr4_o[31:0]
    26/28: $0\instr3_o[31:0]
    27/28: $0\instr2_o[31:0]
    28/28: $0\instr1_o[31:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\BundleParser.\enable1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$210' with positive edge clock.
Creating register for signal `\BundleParser.\enable2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$211' with positive edge clock.
Creating register for signal `\BundleParser.\enable3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$212' with positive edge clock.
Creating register for signal `\BundleParser.\enable4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$213' with positive edge clock.
Creating register for signal `\BundleParser.\instr1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$214' with positive edge clock.
Creating register for signal `\BundleParser.\instr2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\BundleParser.\instr3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$216' with positive edge clock.
Creating register for signal `\BundleParser.\instr4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$217' with positive edge clock.
Creating register for signal `\BundleParser.\addr1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$218' with positive edge clock.
Creating register for signal `\BundleParser.\addr2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\BundleParser.\addr3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\BundleParser.\addr4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$221' with positive edge clock.
Creating register for signal `\BundleParser.\is64b1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$222' with positive edge clock.
Creating register for signal `\BundleParser.\is64b2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$223' with positive edge clock.
Creating register for signal `\BundleParser.\is64b3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$224' with positive edge clock.
Creating register for signal `\BundleParser.\is64b4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\BundleParser.\pid1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\BundleParser.\pid2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\BundleParser.\pid3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$228' with positive edge clock.
Creating register for signal `\BundleParser.\pid4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$229' with positive edge clock.
Creating register for signal `\BundleParser.\tid1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$230' with positive edge clock.
Creating register for signal `\BundleParser.\tid2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$231' with positive edge clock.
Creating register for signal `\BundleParser.\tid3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$232' with positive edge clock.
Creating register for signal `\BundleParser.\tid4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$233' with positive edge clock.
Creating register for signal `\BundleParser.\majID1_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$234' with positive edge clock.
Creating register for signal `\BundleParser.\majID2_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$235' with positive edge clock.
Creating register for signal `\BundleParser.\majID3_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$236' with positive edge clock.
Creating register for signal `\BundleParser.\majID4_o' using process `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
  created $dff cell `$procdff$237' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
Removing empty process `BundleParser.$proc$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:59$1'.
Cleaned up 2 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.
<suppressed ~10 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.
<suppressed ~8 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 0 unused cells and 64 unused wires.
<suppressed ~9 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module BundleParser...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
<suppressed ~234 debug messages>
Removed a total of 78 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
    New ctrl vector for $pmux cell $procmux$164: $auto$opt_reduce.cc:134:opt_pmux$239
    New ctrl vector for $pmux cell $procmux$170: $auto$opt_reduce.cc:134:opt_pmux$241
    New ctrl vector for $pmux cell $procmux$177: $auto$opt_reduce.cc:134:opt_pmux$243
    New ctrl vector for $pmux cell $procmux$190: $auto$opt_reduce.cc:134:opt_pmux$245
    New ctrl vector for $pmux cell $procmux$196: $auto$opt_reduce.cc:134:opt_pmux$247
    New ctrl vector for $pmux cell $procmux$203: $auto$opt_reduce.cc:134:opt_pmux$249
    New ctrl vector for $pmux cell $procmux$23: { $auto$opt_reduce.cc:134:opt_pmux$251 $procmux$100_CMP }
    New ctrl vector for $pmux cell $procmux$112: $auto$opt_reduce.cc:134:opt_pmux$253
    New ctrl vector for $pmux cell $procmux$31: { $auto$opt_reduce.cc:134:opt_pmux$257 $auto$opt_reduce.cc:134:opt_pmux$255 }
    New ctrl vector for $pmux cell $procmux$118: $auto$opt_reduce.cc:134:opt_pmux$259
    New ctrl vector for $pmux cell $procmux$39: { $procmux$103_CMP $auto$opt_reduce.cc:134:opt_pmux$261 }
    New ctrl vector for $pmux cell $procmux$125: $auto$opt_reduce.cc:134:opt_pmux$263
    New ctrl vector for $pmux cell $procmux$47: $auto$opt_reduce.cc:134:opt_pmux$265
    New ctrl vector for $pmux cell $procmux$60: $auto$opt_reduce.cc:134:opt_pmux$267
    New ctrl vector for $pmux cell $procmux$66: $auto$opt_reduce.cc:134:opt_pmux$269
    New ctrl vector for $pmux cell $procmux$138: $auto$opt_reduce.cc:134:opt_pmux$271
    New ctrl vector for $pmux cell $procmux$73: $auto$opt_reduce.cc:134:opt_pmux$273
    New ctrl vector for $pmux cell $procmux$144: $auto$opt_reduce.cc:134:opt_pmux$275
    New ctrl vector for $pmux cell $procmux$86: $auto$opt_reduce.cc:134:opt_pmux$277
    New ctrl vector for $pmux cell $procmux$92: $auto$opt_reduce.cc:134:opt_pmux$279
    New ctrl vector for $pmux cell $procmux$151: $auto$opt_reduce.cc:134:opt_pmux$281
    New ctrl vector for $pmux cell $procmux$99: $auto$opt_reduce.cc:134:opt_pmux$283
  Optimizing cells in module \BundleParser.
Performed a total of 22 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 0 unused cells and 96 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$237 ($dff) from module BundleParser (D = $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:132$21_Y, Q = \majID4_o).
Adding EN signal on $procdff$236 ($dff) from module BundleParser (D = $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:119$13_Y, Q = \majID3_o).
Adding EN signal on $procdff$235 ($dff) from module BundleParser (D = $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:108$7_Y, Q = \majID2_o).
Adding EN signal on $procdff$234 ($dff) from module BundleParser (D = $procmux$73_Y, Q = \majID1_o).
Adding EN signal on $procdff$233 ($dff) from module BundleParser (D = \bundleTid_i, Q = \tid4_o).
Adding EN signal on $procdff$232 ($dff) from module BundleParser (D = \bundleTid_i, Q = \tid3_o).
Adding EN signal on $procdff$231 ($dff) from module BundleParser (D = \bundleTid_i, Q = \tid2_o).
Adding EN signal on $procdff$230 ($dff) from module BundleParser (D = $procmux$99_Y, Q = \tid1_o).
Adding EN signal on $procdff$229 ($dff) from module BundleParser (D = \bundlePid_i, Q = \pid4_o).
Adding EN signal on $procdff$228 ($dff) from module BundleParser (D = \bundlePid_i, Q = \pid3_o).
Adding EN signal on $procdff$227 ($dff) from module BundleParser (D = \bundlePid_i, Q = \pid2_o).
Adding EN signal on $procdff$226 ($dff) from module BundleParser (D = $procmux$125_Y, Q = \pid1_o).
Adding EN signal on $procdff$225 ($dff) from module BundleParser (D = \is64Bit_i, Q = \is64b4_o).
Adding EN signal on $procdff$224 ($dff) from module BundleParser (D = \is64Bit_i, Q = \is64b3_o).
Adding EN signal on $procdff$223 ($dff) from module BundleParser (D = \is64Bit_i, Q = \is64b2_o).
Adding EN signal on $procdff$222 ($dff) from module BundleParser (D = $procmux$151_Y, Q = \is64b1_o).
Adding EN signal on $procdff$221 ($dff) from module BundleParser (D = $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:128$17_Y, Q = \addr4_o).
Adding EN signal on $procdff$220 ($dff) from module BundleParser (D = $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:115$10_Y, Q = \addr3_o).
Adding EN signal on $procdff$219 ($dff) from module BundleParser (D = $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:104$5_Y, Q = \addr2_o).
Adding EN signal on $procdff$218 ($dff) from module BundleParser (D = $procmux$177_Y, Q = \addr1_o).
Adding EN signal on $procdff$217 ($dff) from module BundleParser (D = \bundle_i [31:0], Q = \instr4_o).
Adding EN signal on $procdff$216 ($dff) from module BundleParser (D = \bundle_i [63:32], Q = \instr3_o).
Adding EN signal on $procdff$215 ($dff) from module BundleParser (D = \bundle_i [95:64], Q = \instr2_o).
Adding EN signal on $procdff$214 ($dff) from module BundleParser (D = $procmux$203_Y, Q = \instr1_o).
Adding SRST signal on $procdff$213 ($dff) from module BundleParser (D = $procmux$23_Y, Q = \enable4_o, rval = 1'0).
Adding SRST signal on $procdff$212 ($dff) from module BundleParser (D = $procmux$31_Y, Q = \enable3_o, rval = 1'0).
Adding SRST signal on $procdff$211 ($dff) from module BundleParser (D = $procmux$39_Y, Q = \enable2_o, rval = 1'0).
Adding SRST signal on $procdff$210 ($dff) from module BundleParser (D = $procmux$47_Y, Q = \enable1_o, rval = 1'0).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 46 unused cells and 46 unused wires.
<suppressed ~47 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell BundleParser.$add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:104$5 ($add).
Removed top 31 bits (of 32) from port B of cell BundleParser.$add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:108$7 ($add).
Removed top 28 bits (of 32) from port B of cell BundleParser.$add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:115$10 ($add).
Removed top 30 bits (of 32) from port B of cell BundleParser.$add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:119$13 ($add).
Removed top 28 bits (of 32) from port B of cell BundleParser.$add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:128$17 ($add).
Removed top 30 bits (of 32) from port B of cell BundleParser.$add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:132$21 ($add).
Removed top 1 bits (of 2) from port B of cell BundleParser.$procmux$102_CMP0 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module BundleParser:
  creating $macc model for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:104$5 ($add).
  creating $macc model for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:108$7 ($add).
  creating $macc model for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:115$10 ($add).
  creating $macc model for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:119$13 ($add).
  creating $macc model for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:128$17 ($add).
  creating $macc model for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:132$21 ($add).
  creating $alu model for $macc $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:132$21.
  creating $alu model for $macc $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:128$17.
  creating $alu model for $macc $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:119$13.
  creating $alu model for $macc $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:115$10.
  creating $alu model for $macc $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:108$7.
  creating $alu model for $macc $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:104$5.
  creating $alu cell for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:104$5: $auto$alumacc.cc:485:replace_alu$348
  creating $alu cell for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:108$7: $auto$alumacc.cc:485:replace_alu$351
  creating $alu cell for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:115$10: $auto$alumacc.cc:485:replace_alu$354
  creating $alu cell for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:119$13: $auto$alumacc.cc:485:replace_alu$357
  creating $alu cell for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:128$17: $auto$alumacc.cc:485:replace_alu$360
  creating $alu cell for $add$/home/hakaru/Projects/Verilog/PowerPC/QFLOW3/source/BundleParser.v:132$21: $auto$alumacc.cc:485:replace_alu$363
  created 6 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.
<suppressed ~14 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 4 unused cells and 14 unused wires.
<suppressed ~5 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using template $paramod$cfc358ad4324de4a8b1a90122180c6d22cc58937\_90_alu for cells of type $alu.
Using template $paramod$be099e65a2916bc2f93589bb8b12d430dab57b0e\_90_alu for cells of type $alu.
Using template $paramod$79f6a36bf447fef46c5e52fd91ab9439878d9a5a\_90_alu for cells of type $alu.
Using template $paramod$7794117fe9a0be32b5465257a57369a28864ca5d\_90_alu for cells of type $alu.
Using template $paramod$ff467a932a72bec5a93c27dba04bf3daba067451\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2660 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.
<suppressed ~2168 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
<suppressed ~1110 debug messages>
Removed a total of 370 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 134 unused cells and 1305 unused wires.
<suppressed ~135 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\BundleParser' to `<abc-temp-dir>/input.blif'..
Extracted 959 gates and 1088 wires to a netlist network with 129 inputs and 380 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "berkeley-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        8
ABC RESULTS:             ORNOT cells:       17
ABC RESULTS:              NAND cells:      122
ABC RESULTS:               NOR cells:       18
ABC RESULTS:               AND cells:       34
ABC RESULTS:                OR cells:      216
ABC RESULTS:              XNOR cells:      136
ABC RESULTS:            ANDNOT cells:      183
ABC RESULTS:               XOR cells:      234
ABC RESULTS:        internal signals:      579
ABC RESULTS:           input signals:      129
ABC RESULTS:          output signals:      380
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 0 unused cells and 730 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \BundleParser

3.24.2. Analyzing design hierarchy..
Top module:  \BundleParser
Removed 0 unused modules.

3.25. Printing statistics.

=== BundleParser ===

   Number of wires:                645
   Number of wire bits:           2613
   Number of public wires:          41
   Number of public wire bits:    1393
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2000
     $_ANDNOT_                     183
     $_AND_                         34
     $_DFFE_PP_                   1028
     $_NAND_                       122
     $_NOR_                         18
     $_NOT_                          8
     $_ORNOT_                       17
     $_OR_                         216
     $_SDFF_PN0_                     4
     $_XNOR_                       136
     $_XOR_                        234

3.26. Executing CHECK pass (checking for obvious problems).
Checking module BundleParser...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\BundleParser':
  mapped 1032 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.
<suppressed ~1 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\BundleParser' to `<abc-temp-dir>/input.blif'..
Extracted 1999 gates and 3384 wires to a netlist network with 1384 inputs and 1031 outputs.

6.1.1. Executing ABC.
Running ABC command: "/usr/lib/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:           OAI22X1 cells:        2
ABC RESULTS:            MUX2X1 cells:        2
ABC RESULTS:            NOR3X1 cells:       18
ABC RESULTS:            AND2X2 cells:       33
ABC RESULTS:             OR2X2 cells:       21
ABC RESULTS:            NOR2X1 cells:      233
ABC RESULTS:           AOI21X1 cells:       66
ABC RESULTS:           NAND3X1 cells:       69
ABC RESULTS:           XNOR2X1 cells:      104
ABC RESULTS:             INVX1 cells:      487
ABC RESULTS:           NAND2X1 cells:      771
ABC RESULTS:           OAI21X1 cells:     1830
ABC RESULTS:        internal signals:      969
ABC RESULTS:           input signals:     1384
ABC RESULTS:          output signals:     1031
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 3019 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port BundleParser.addr1_o using BUFX2.
Mapping port BundleParser.addr2_o using BUFX2.
Mapping port BundleParser.addr3_o using BUFX2.
Mapping port BundleParser.addr4_o using BUFX2.
Don't map input port BundleParser.bundleAddress_i: Missing option -inpad.
Don't map input port BundleParser.bundleLen_i: Missing option -inpad.
Don't map input port BundleParser.bundlePid_i: Missing option -inpad.
Don't map input port BundleParser.bundleStartMajId_i: Missing option -inpad.
Don't map input port BundleParser.bundleTid_i: Missing option -inpad.
Don't map input port BundleParser.bundle_i: Missing option -inpad.
Don't map input port BundleParser.clock_i: Missing option -inpad.
Don't map input port BundleParser.enable1_i: Missing option -inpad.
Mapping port BundleParser.enable1_o using BUFX2.
Don't map input port BundleParser.enable2_i: Missing option -inpad.
Mapping port BundleParser.enable2_o using BUFX2.
Don't map input port BundleParser.enable3_i: Missing option -inpad.
Mapping port BundleParser.enable3_o using BUFX2.
Don't map input port BundleParser.enable4_i: Missing option -inpad.
Mapping port BundleParser.enable4_o using BUFX2.
Don't map input port BundleParser.enable_i: Missing option -inpad.
Mapping port BundleParser.instr1_o using BUFX2.
Mapping port BundleParser.instr2_o using BUFX2.
Mapping port BundleParser.instr3_o using BUFX2.
Mapping port BundleParser.instr4_o using BUFX2.
Don't map input port BundleParser.is64Bit_i: Missing option -inpad.
Mapping port BundleParser.is64b1_o using BUFX2.
Mapping port BundleParser.is64b2_o using BUFX2.
Mapping port BundleParser.is64b3_o using BUFX2.
Mapping port BundleParser.is64b4_o using BUFX2.
Mapping port BundleParser.majID1_o using BUFX2.
Mapping port BundleParser.majID2_o using BUFX2.
Mapping port BundleParser.majID3_o using BUFX2.
Mapping port BundleParser.majID4_o using BUFX2.
Mapping port BundleParser.pid1_o using BUFX2.
Mapping port BundleParser.pid2_o using BUFX2.
Mapping port BundleParser.pid3_o using BUFX2.
Mapping port BundleParser.pid4_o using BUFX2.
Mapping port BundleParser.tid1_o using BUFX2.
Mapping port BundleParser.tid2_o using BUFX2.
Mapping port BundleParser.tid3_o using BUFX2.
Mapping port BundleParser.tid4_o using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BundleParser..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BundleParser.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BundleParser'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BundleParser..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module BundleParser.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== BundleParser ===

   Number of wires:               3705
   Number of wire bits:           6061
   Number of public wires:        3705
   Number of public wire bits:    6061
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5700
     AND2X2                         33
     AOI21X1                        66
     BUFX2                        1032
     DFFPOSX1                     1032
     INVX1                         487
     MUX2X1                          2
     NAND2X1                       771
     NAND3X1                        69
     NOR2X1                        233
     NOR3X1                         18
     OAI21X1                      1830
     OAI22X1                         2
     OR2X2                          21
     XNOR2X1                       104

End of script. Logfile hash: 6740ecc12a, CPU: user 1.95s system 0.01s, MEM: 36.21 MB peak
Yosys 0.23 (git sha1 7ce5011c24b)
Time spent: 36% 2x abc (1 sec), 14% 29x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl BundleParser_mapped.blif BundleParser /usr/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I BundleParser_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif BundleParser.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 698 (load 11337.2) from node _1031_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 193.418 (latency = 19341.8 ps)
Top input node fanout is 1032 (load 28817.1) from node clock_i.
Warning 1: load of 893.209 is 1.95822 times greater than strongest gate INVX8
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 4: load of 138.228 is 2.36696 times greater than strongest gate NAND2X1
Warning 16: load of 160.713 is 2.75197 times greater than strongest gate NAND2X1
Warning 29: load of 210.357 is 3.60205 times greater than strongest gate NAND2X1
Warning 299: load of 269.047 is 4.60703 times greater than strongest gate NAND2X1
Warning 380: load of 11347.2 is 24.8769 times greater than strongest gate INVX8
Warning 381: load of 6875.23 is 117.89 times greater than strongest gate OAI21X1
1414 gates exceed specified minimum load.
370 buffers were added.
260 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 4614    	Out: 4354    	-260
	"2" gates	In: 1086    	Out: 1300    	+214

Number of gates changed: 630
gates resized: 630
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 78 (load 861.436) from node _1031_,
driven by INVX8 with strength 456.133 (fF driven at latency 100)
Top fanout load-to-strength ratio is 9.68157 (latency = 968.157 ps)
Top input node fanout is 102 (load 3813.91) from node clock_i.
Warning 1: load of 229.516 is 1.02012 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 5: load of 230.374 is 1.02394 times greater than strongest gate BUFX4
Warning 13: load of 231.231 is 1.02775 times greater than strongest gate BUFX4
Warning 52: load of 266.3 is 1.18362 times greater than strongest gate BUFX4
Warning 55: load of 385.63 is 1.714 times greater than strongest gate BUFX4
Warning 75: load of 400.212 is 1.77881 times greater than strongest gate BUFX4
Warning 90: load of 606.603 is 2.61901 times greater than strongest gate CLKBUF1
Warning 290: load of 160.713 is 2.75197 times greater than strongest gate NAND2X1
Warning 303: load of 210.357 is 3.60205 times greater than strongest gate NAND2X1
Warning 578: load of 269.047 is 4.60703 times greater than strongest gate NAND2X1
Warning 660: load of 574.618 is 9.85304 times greater than strongest gate OAI21X1
1691 gates exceed specified minimum load.
120 buffers were added.
281 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 4456    	Out: 4456    	+0
	"2" gates	In: 1568    	Out: 1288    	-280
	"4" gates	In: 40    	Out: 319    	+279
	"8" gates	In: 6    	Out: 7    	+1

Number of gates changed: 401
gates resized: 401
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 596.603) from node _1134__bF$buf14,
driven by BUFX4 with strength 224.988 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.43579 (latency = 443.579 ps)
Top input node fanout is 10 (load 145.887) from node clock_i.
Warning 1: load of 502.052 is 2.23146 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 180: load of 606.603 is 2.61901 times greater than strongest gate CLKBUF1
Warning 401: load of 160.713 is 2.75197 times greater than strongest gate NAND2X1
Warning 414: load of 210.357 is 3.60205 times greater than strongest gate NAND2X1
Warning 690: load of 269.047 is 4.60703 times greater than strongest gate NAND2X1
1801 gates exceed specified minimum load.
0 buffers were added.
120 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 4456    	Out: 4456    	+0
	"2" gates	In: 1408    	Out: 1288    	-120
	"4" gates	In: 319    	Out: 439    	+120
	"8" gates	In: 7    	Out: 7    	+0

Number of gates changed: 120
gates resized: 120
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 603.867) from node _1134__bF$buf14,
driven by BUFX4 with strength 224.988 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.43579 (latency = 443.579 ps)
Top input node fanout is 10 (load 145.887) from node clock_i.
Warning 1: load of 289.292 is 1.28581 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 13: load of 328.432 is 1.45977 times greater than strongest gate BUFX4
Warning 83: load of 613.867 is 2.72844 times greater than strongest gate BUFX4
Warning 505: load of 160.713 is 2.75197 times greater than strongest gate NAND2X1
Warning 518: load of 210.357 is 3.60205 times greater than strongest gate NAND2X1
Warning 794: load of 269.047 is 4.60703 times greater than strongest gate NAND2X1
1905 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 4456    	Out: 4456    	+0
	"2" gates	In: 1288    	Out: 1288    	+0
	"4" gates	In: 439    	Out: 439    	+0
	"8" gates	In: 7    	Out: 7    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/hakaru/Projects/Verilog/PowerPC/QFLOW3/synthesis
Files:
   Verilog: /home/hakaru/Projects/Verilog/PowerPC/QFLOW3/synthesis/BundleParser.rtl.v
   Verilog: /home/hakaru/Projects/Verilog/PowerPC/QFLOW3/synthesis/BundleParser.rtlnopwr.v
   Verilog: /home/hakaru/Projects/Verilog/PowerPC/QFLOW3/synthesis/BundleParser.rtlbb.v
   Spice:   /home/hakaru/Projects/Verilog/PowerPC/QFLOW3/synthesis/BundleParser.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f BundleParser.spc BundleParser.xspice

Synthesis script ended on Sun 24 Sep 00:26:02 BST 2023
